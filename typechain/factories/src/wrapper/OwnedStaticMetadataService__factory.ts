/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OwnedStaticMetadataService,
  OwnedStaticMetadataServiceInterface,
} from "../../../src/wrapper/OwnedStaticMetadataService";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_metaDataUri",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "uri",
        type: "string",
      },
    ],
    name: "UriChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_metaDataUri",
        type: "string",
      },
    ],
    name: "changeUri",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b7138038062000b7183398101604081905262000034916200011a565b6200003f336200008e565b60016200004d828262000261565b507fb1bf12e17db588c31e8fb2afdd2b3bc1ed822d68c560856fcbc75ae303fc5d14816040516200007f91906200032d565b60405180910390a15062000362565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000111578181015183820152602001620000f7565b50506000910152565b6000602082840312156200012d57600080fd5b81516001600160401b03808211156200014557600080fd5b818401915084601f8301126200015a57600080fd5b8151818111156200016f576200016f620000de565b604051601f8201601f19908116603f011681019083821181831017156200019a576200019a620000de565b81604052828152876020848701011115620001b457600080fd5b620001c7836020830160208801620000f4565b979650505050505050565b600181811c90821680620001e757607f821691505b6020821081036200020857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025c57600081815260208120601f850160051c81016020861015620002375750805b601f850160051c820191505b81811015620002585782815560010162000243565b5050505b505050565b81516001600160401b038111156200027d576200027d620000de565b62000295816200028e8454620001d2565b846200020e565b602080601f831160018114620002cd5760008415620002b45750858301515b600019600386901b1c1916600185901b17855562000258565b600085815260208120601f198616915b82811015620002fe57888601518255948401946001909101908401620002dd565b50858210156200031d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600082518060208401526200034e816040850160208701620000f4565b601f01601f19169190910160400192915050565b6107ff80620003726000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638da5cb5b116100505780638da5cb5b1461009f578063eb1f9f6e146100c7578063f2fde38b146100da57600080fd5b80630e89341c1461006c578063715018a614610095575b600080fd5b61007f61007a366004610485565b6100ed565b60405161008c91906104c2565b60405180910390f35b61009d610121565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b61009d6100d536600461050b565b610135565b61009d6100e83660046105bc565b610184565b606060016100fa83610226565b60405160200161010b929190610633565b6040516020818303038152906040529050919050565b6101296102c6565b610133600061032d565b565b61013d6102c6565b60016101498282610709565b507fb1bf12e17db588c31e8fb2afdd2b3bc1ed822d68c560856fcbc75ae303fc5d148160405161017991906104c2565b60405180910390a150565b61018c6102c6565b73ffffffffffffffffffffffffffffffffffffffff811661021a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102238161032d565b50565b60606000610233836103a2565b600101905060008167ffffffffffffffff811115610253576102536104f5565b6040519080825280601f01601f19166020018201604052801561027d576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461028757509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610211565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106103eb577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610417576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061043557662386f26fc10000830492506010015b6305f5e100831061044d576305f5e100830492506008015b612710831061046157612710830492506004015b60648310610473576064830492506002015b600a831061047f576001015b92915050565b60006020828403121561049757600080fd5b5035919050565b60005b838110156104b95781810151838201526020016104a1565b50506000910152565b60208152600082518060208401526104e181604085016020870161049e565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561051d57600080fd5b813567ffffffffffffffff8082111561053557600080fd5b818401915084601f83011261054957600080fd5b81358181111561055b5761055b6104f5565b604051601f8201601f19908116603f01168101908382118183101715610583576105836104f5565b8160405282815287602084870101111561059c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156105ce57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146105f257600080fd5b9392505050565b600181811c9082168061060d57607f821691505b60208210810361062d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808454610641816105f9565b60018281168015610659576001811461066e5761069d565b60ff198416875282151583028701945061069d565b8860005260208060002060005b858110156106945781548a82015290840190820161067b565b50505082870194505b5050505083516106b181836020880161049e565b01949350505050565b601f82111561070457600081815260208120601f850160051c810160208610156106e15750805b601f850160051c820191505b81811015610700578281556001016106ed565b5050505b505050565b815167ffffffffffffffff811115610723576107236104f5565b6107378161073184546105f9565b846106ba565b602080601f83116001811461076c57600084156107545750858301515b600019600386901b1c1916600185901b178555610700565b600085815260208120601f198616915b8281101561079b5788860151825594840194600190910190840161077c565b50858210156107b95787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220772bf0cd5238761aa7f4fcbbe0b508b683e1a920c78da14007653f010924982464736f6c63430008110033";

type OwnedStaticMetadataServiceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnedStaticMetadataServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnedStaticMetadataService__factory extends ContractFactory {
  constructor(...args: OwnedStaticMetadataServiceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _metaDataUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OwnedStaticMetadataService> {
    return super.deploy(
      _metaDataUri,
      overrides || {}
    ) as Promise<OwnedStaticMetadataService>;
  }
  override getDeployTransaction(
    _metaDataUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_metaDataUri, overrides || {});
  }
  override attach(address: string): OwnedStaticMetadataService {
    return super.attach(address) as OwnedStaticMetadataService;
  }
  override connect(signer: Signer): OwnedStaticMetadataService__factory {
    return super.connect(signer) as OwnedStaticMetadataService__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnedStaticMetadataServiceInterface {
    return new utils.Interface(_abi) as OwnedStaticMetadataServiceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnedStaticMetadataService {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OwnedStaticMetadataService;
  }
}
